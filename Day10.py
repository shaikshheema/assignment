# -*- coding: utf-8 -*-
"""day9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hL62foGJ0g4PO969WcCMp29n3rBqPDwD
"""

'''Assignment 1: Filtering Data Based on Conditions
Tasks:
Filter out all rows where the Transaction_Amount is greater than 2000.
Find all rows where the Transaction_Type is "Loan Payment" and the Account_Balance is greater than 5000.
Extract transactions made in the "Uptown" branch.
Objective:
Practice filtering data using conditions and boolean indexing.
'''

import pandas as pd

# Load the banking_data.csv file
df = pd.read_csv('Day_9_banking_data.csv')

# 1. Filter out all rows where the Transaction_Amount is greater than 2000
filtered_transaction_amount = df[df['Transaction_Amount'] <= 2000]

# Display the filtered rows
print("Transactions with Transaction_Amount <= 2000:")
print(filtered_transaction_amount)

# 2. Find all rows where the Transaction_Type is 'Loan Payment' and the Account_Balance is greater than 5000
filtered_loan_payment = df[(df['Transaction_Type'] == 'Loan Payment') & (df['Account_Balance'] > 5000)]

# Display the filtered rows
print("\nTransactions with 'Loan Payment' and Account_Balance > 5000:")
print(filtered_loan_payment)

# 3. Extract all transactions made in the 'Uptown' branch
filtered_uptown_branch = df[df['Branch'] == 'Uptown']

# Display the filtered rows
print("\nTransactions made in the 'Uptown' branch:")
print(filtered_uptown_branch)

'''Assignment 2: Data Transformation
Tasks:
Add a new column called Transaction_Fee, calculated as 2% of Transaction_Amount.
Create a new column Balance_Status:
If Account_Balance is greater than 5000, label it as "High Balance".
Otherwise, label it as "Low Balance".
Objective:
Learn how to create new columns and apply transformations based on existing data.
'''

import pandas as pd

# Load the banking_data.csv file
df = pd.read_csv('Day_9_banking_data.csv')

# 1. Add a new column 'Transaction_Fee' calculated as 2% of Transaction_Amount
df['Transaction_Fee'] = df['Transaction_Amount'] * 0.02

# 2. Create a new column 'Balance_Status' based on Account_Balance
df['Balance_Status'] = df['Account_Balance'].apply(lambda x: 'High Balance' if x > 5000 else 'Low Balance')

# Display the updated DataFrame with the new columns
print("Updated DataFrame with new columns:")
print(df)